#!/usr/bin/env python3
"""
Dynamic artifact discovery and Markdown table generation
"""
import os
import argparse
from datetime import datetime

def discover_artifacts(base_dir):
    """Recursively discover all model artifacts"""
    print(f"üîç Discovering artifacts in {base_dir}")
    
    artifacts = []
    
    for root, dirs, files in os.walk(base_dir):
        for file in files:
            if file in ['model.tar.gz', 'xgboost-model'] or file.endswith('.pkl') or file.endswith('.joblib'):
                full_path = os.path.join(root, file)
                rel_path = os.path.relpath(full_path, '/workspace/conviction-ai-clean')
                
                try:
                    size_bytes = os.path.getsize(full_path)
                    size_mb = size_bytes / (1024 * 1024)
                    
                    if size_mb >= 1:
                        size_str = f"{size_mb:.1f} MB"
                    else:
                        size_kb = size_bytes / 1024
                        size_str = f"{size_kb:.1f} KB"
                    
                    artifacts.append({
                        'path': rel_path,
                        'size': size_str,
                        'size_bytes': size_bytes
                    })
                    
                except Exception as e:
                    artifacts.append({
                        'path': rel_path,
                        'size': 'Unknown',
                        'size_bytes': 0
                    })
    
    artifacts.sort(key=lambda x: x['size_bytes'], reverse=True)
    
    print(f"‚úÖ Discovered {len(artifacts)} artifacts")
    return artifacts

def generate_markdown_table(artifacts, output_file):
    """Generate Markdown table of artifacts"""
    print(f"üìã Generating Markdown table...")
    
    content = f"""# Model Artifacts Inventory

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}  
**Total Artifacts:** {len(artifacts)}

| Path | Size |
|------|------|
"""
    
    for artifact in artifacts:
        content += f"| {artifact['path']} | {artifact['size']} |\n"
    
    content += f"""


- **Total Files:** {len(artifacts)}
- **Total Size:** {sum(a['size_bytes'] for a in artifacts) / (1024*1024):.1f} MB
- **Largest File:** {artifacts[0]['size'] if artifacts else 'N/A'}

---
*Generated by dynamic artifact discovery*
"""
    
    with open(output_file, 'w') as f:
        f.write(content)
    
    print(f"‚úÖ Markdown table written to {output_file}")

def main():
    parser = argparse.ArgumentParser(description='Discover and catalog model artifacts')
    parser.add_argument('--input-dir', type=str, default='models/hpo_best/46_models_hpo',
                        help='Directory to search for artifacts')
    parser.add_argument('--output-file', type=str, default='artifacts_inventory.md',
                        help='Output markdown file')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.input_dir):
        print(f"‚ùå Input directory not found: {args.input_dir}")
        exit(1)
    
    artifacts = discover_artifacts(args.input_dir)
    
    if artifacts:
        generate_markdown_table(artifacts, args.output_file)
        print("‚úÖ Artifact discovery complete")
    else:
        print("‚ö†Ô∏è No artifacts found")

if __name__ == "__main__":
    main()
